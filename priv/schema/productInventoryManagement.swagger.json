{
  "swagger": "2.0",
  "info": {
    "description": "TMF637 Product Inventory Management",
    "version": "2.0.0",
    "title": "API Product Inventory Management"
  },
  "basePath": "/productInventoryManagement/v2/",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
    {
      "name": "product",
      "description": ""
    }
  ],
  "paths": {
    "/product": {
      "post": {
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "product",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "operationId": "productCreate",
        "summary": "productCreate",
        "description": "Create a product entity",
        "deprecated": false,
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value"
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found"
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error"
          }
        }
      },
      "get": {
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "operationId": "productFind",
        "summary": "productFind",
        "description": "This operation lists all product entites",
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value"
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found"
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error"
          }
        }
      }
    },
    "/product/{id}": {
      "get": {
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identity of the product"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "operationId": "productGet",
        "summary": "productGet",
        "description": "This operation retrives a product entity",
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value"
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found"
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error"
          }
        }
      },
      "patch": {
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identity of the product"
          },
          {
            "name": "product",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "operationId": "productPatch",
        "summary": "productPatch",
        "description": "This operation patches a product entity",
        "deprecated": false,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value"
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found"
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error"
          }
        }
      },
      "delete": {
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identity of the product"
          }
        ],
        "operationId": "productDelete",
        "summary": "productDelete",
        "description": "This operation deletes a product entity",
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value"
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found"
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error"
          }
        }
      }
    }
  },
  "definitions": {
    "Product": {
      "description": "A Product represents the subscription of a ProductOffering by a Party playing a PartyRole, such as a Customer.  For example, Jean has subscribed to company ABCâ€™s internet ProductOffering.\nThe association between ProductSpecification and Product allows ProductSpecification, to be instantiated as Product and related to customers or other involved parties.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'Product'",
          "type": "string"
        },
        "@type": {
          "description": "Indicated the type of resource.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductCharacteristic"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealizingService"
          }
        }
      }
    },
    "ProductOfferingRef": {
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product offering",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product offering",
          "type": "string"
        },
        "name": {
          "description": "Name of the product offering",
          "type": "string"
        }
      }
    },
    "ProductCharacteristic": {
      "description": "Characteristics of the product to instantiate or to modify.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "RealizingService": {
      "description": "RealizingService reference. RealizingService is a link to the service that realizes the product.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        }
      }
    }
  }
}