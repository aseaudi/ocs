{
  "swagger": "2.0",
  "info": {
    "description": "TMF635 Usage Management",
    "version": "1.0.0",
    "title": "API Party Management"
  },
  "basePath": "/usageManagement/v1/",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "usage"
    },
    {
      "name": "usageSpecification"
    },
    {
      "name": "eventsSubscription"
    }
  ],
  "paths": {
    "/usage": {
      "get": {
        "tags": [
          "usage"
        ],
        "operationId": "usageGet",
        "summary": "This operation lists all usage entites",
        "deprecated": false,
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Usage type to be looked up",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Usage"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/usage/{usageId}": {
      "get": {
        "tags": [
          "usage"
        ],
        "operationId": "individualUsage",
        "summary": "This operation finds a specific usage entity",
        "deprecated": false,
        "parameters": [
          {
            "name": "usageId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Usage"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/usageSpecification": {
      "get": {
        "tags": [
          "usageSpecification"
        ],
        "operationId": "getUsageSpecification",
        "summary": "This operation lists all UsageSpecification entities",
        "deprecated": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsageSpecification"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/usageSpecification/{Id}": {
      "get": {
        "tags": [
          "usageSpecification"
        ],
        "operationId": "individualUsageSpecification",
        "summary": "This operation finds a specific UsageSpecification entity",
        "deprecated": false,
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsageSpecification"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "eventsSubscription"
        ],
        "operationId": "registerSubscriber",
        "summary": "Register a subscriber",
        "deprecated": false,
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "eventsSubscription"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "identity of the subscriber"
          }
        ],
        "operationId": "deleteSubscriber",
        "summary": "This operation deletes a 'subscriber' by Id",
        "deprecated": false,
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "Usage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "href": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Received",
            "Rejected",
            "Recycled",
            "Guided",
            "Rated",
            "Rerate",
            "Billed"
          ]
        },
        "usageSpecification": {
          "$ref": "#/definitions/UsageSpecification"
        },
        "usageCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsageCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "ratedProductUsage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RatedProductUsage"
          }
        }
      }
    },
    "UsageSpecification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/ValidFor"
        },
        "usageSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsageSpecCharacteristic"
          }
        }
      }
    },
    "RatedProductUsage": {
      "type": "object",
      "properties": {
        "ratingDate": {
          "type": "string",
          "format": "date-time"
        },
        "usageRatingTag": {
          "type": "string"
        },
        "isBilled": {
          "type": "boolean"
        },
        "ratingAmountType": {
          "type": "string"
        },
        "taxIncludedRatingAmount": {
          "type": "number",
          "format": "float"
        },
        "taxExcludedRatingAmount": {
          "type": "number",
          "format": "float"
        },
        "taxRate": {
          "type": "number",
          "format": "float"
        },
        "isTaxExempt": {
          "type": "boolean"
        },
        "offerTariffType": {
          "type": "string"
        },
        "bucketValueConvertedInAmount": {
          "type": "number",
          "format": "float"
        },
        "currencyCode": {
          "type": "string"
        },
        "productRef": {
          "type": "string"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "UsageCharacteristic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "UsageSpecCharacteristic": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "configurable": {
          "type": "boolean"
        },
        "usageSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsageSpecCharacteristicValue"
          }
        }
      }
    },
    "UsageSpecCharacteristicValue": {
      "type": "object",
      "properties": {
        "valueType": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        },
        "valueFrom": {
          "type": "string"
        },
        "valueTo": {
          "type": "string"
        }
      }
    },
    "ValidFor": {
      "type": "object",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EventSubscriptionInput": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    }
  }
}
